// <auto-generated />
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using Recipes_Api;

namespace Recipes_Api.Migrations
{
    [DbContext(typeof(RecipesContext))]
    [Migration("20200706051759_recipeingredientmeasurement")]
    partial class recipeingredientmeasurement
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Npgsql:PostgresExtension:adminpack", ",,")
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn)
                .HasAnnotation("ProductVersion", "3.1.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            modelBuilder.Entity("Recipes_API.Ingredient", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ingredient_id")
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnName("ingredient_name")
                        .HasColumnType("character varying(64)")
                        .HasMaxLength(64);

                    b.HasKey("Id");

                    b.ToTable("ingredient");
                });

            modelBuilder.Entity("Recipes_API.Measurement", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("measurement_id")
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnName("measurement_name")
                        .HasColumnType("character varying(64)")
                        .HasMaxLength(64);

                    b.Property<string>("Symbol")
                        .IsRequired()
                        .HasColumnName("measurement_symbol")
                        .HasColumnType("character varying(8)")
                        .HasMaxLength(8);

                    b.HasKey("Id");

                    b.ToTable("measurement");
                });

            modelBuilder.Entity("Recipes_API.Models.RecipeIngredientMeasurement", b =>
                {
                    b.Property<long>("RecipeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("recipe_id")
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<long>("IngredientId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ingredient_id")
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<long>("MeasurementId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("measurement_id")
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<double>("Quantity")
                        .HasColumnName("quantity")
                        .HasColumnType("double precision");

                    b.HasKey("RecipeId", "IngredientId", "MeasurementId")
                        .HasName("recipe_ingredient_measurement_pkey");

                    b.HasIndex("IngredientId");

                    b.HasIndex("MeasurementId");

                    b.ToTable("recipe_ingredient_measurement");
                });

            modelBuilder.Entity("Recipes_API.Recipe", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("recipe_id")
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnName("recipe_name")
                        .HasColumnType("character varying(64)")
                        .HasMaxLength(64);

                    b.HasKey("Id");

                    b.ToTable("recipe");
                });

            modelBuilder.Entity("Recipes_API.RecipeTool", b =>
                {
                    b.Property<long>("RecipeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("recipe_id")
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<long>("ToolId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("tool_id")
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("Quantity")
                        .HasColumnName("quantity")
                        .HasColumnType("integer");

                    b.HasKey("RecipeId", "ToolId")
                        .HasName("recipe_tool_pkey");

                    b.HasIndex("ToolId");

                    b.ToTable("recipe_tool");
                });

            modelBuilder.Entity("Recipes_API.Tool", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("tool_id")
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnName("tool_name")
                        .HasColumnType("character varying(64)")
                        .HasMaxLength(64);

                    b.HasKey("Id");

                    b.ToTable("tool");
                });

            modelBuilder.Entity("Recipes_API.Models.RecipeIngredientMeasurement", b =>
                {
                    b.HasOne("Recipes_API.Ingredient", "Ingredient")
                        .WithMany("RecipeIngredientMeasurement")
                        .HasForeignKey("IngredientId")
                        .HasConstraintName("recipe_ingredient_measurement_ingredient_id_fkey")
                        .IsRequired();

                    b.HasOne("Recipes_API.Measurement", "Measurement")
                        .WithMany("RecipeIngredientMeasurement")
                        .HasForeignKey("MeasurementId")
                        .HasConstraintName("recipe_ingredient_measurement_measurement_id_fkey")
                        .IsRequired();

                    b.HasOne("Recipes_API.Recipe", "Recipe")
                        .WithMany("RecipeIngredientMeasurement")
                        .HasForeignKey("RecipeId")
                        .HasConstraintName("recipe_ingredient_measurement_recipe_id_fkey")
                        .IsRequired();
                });

            modelBuilder.Entity("Recipes_API.RecipeTool", b =>
                {
                    b.HasOne("Recipes_API.Recipe", "Recipe")
                        .WithMany("RecipeTool")
                        .HasForeignKey("RecipeId")
                        .HasConstraintName("recipe_tool_recipe_id_fkey")
                        .IsRequired();

                    b.HasOne("Recipes_API.Tool", "Tool")
                        .WithMany("RecipeTool")
                        .HasForeignKey("ToolId")
                        .HasConstraintName("recipe_tool_tool_id_fkey")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
